{"version":3,"sources":["webpack:///src/views/detail.vue","webpack:///./src/views/detail.vue?b5dc","webpack:///./src/views/detail.vue","webpack:///./node_modules/_marked@0.7.0@marked/lib/marked.js"],"names":["marked","__webpack_require__","hljs","setOptions","renderer","Renderer","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","highlight","code","lang","getLanguage","value","highlightAuto","detail","data","blogInfo","created","this","getBookInfo","computed","compiledMarkdown","content","watch","$route","filters","getTime","val","Date","getFullYear","getMonth","getDate","methods","_this","asyncToGenerator_default","regenerator_default","a","mark","_callee","_id","result","wrap","_context","prev","next","params","id","$axios","get","sent","t0","$message","message","type","stop","views_detail","render","_vm","_h","$createElement","_c","_self","directives","name","rawName","expression","staticClass","_v","_s","title","userinfo","username","_f","createAt","clickNum","domProps","innerHTML","staticRenderFns","Component","normalizeComponent","ssrContext","__webpack_exports__","global","root","block","newline","fences","hr","heading","blockquote","list","html","def","nptable","noop","table","lheading","_paragraph","text","Lexer","options","tokens","links","Object","create","defaults","rules","normal","_label","_title","edit","replace","getRegex","bullet","item","source","_tag","_comment","paragraph","merge","lex","src","prototype","token","top","loose","cap","bull","b","listStart","listItems","t","space","i","tag","l","isordered","istask","ischecked","exec","substring","length","push","lastToken","trimRight","codeBlockStyle","rtrim","trim","depth","header","splitCells","align","split","cells","test","ordered","start","match","indexOf","RegExp","slice","join","charAt","undefined","task","checked","pre","sanitizer","escape","toLowerCase","href","Error","charCodeAt","inline","autolink","url","link","reflink","nolink","strong","em","br","del","InlineLexer","TextRenderer","Parser","slugger","Slugger","seen","encode","escapeTest","escapeReplace","ch","replacements","escapeTestNoEncode","escapeReplaceNoEncode","unescape","_","n","String","fromCharCode","parseInt","regex","opt","cleanUrl","base","prot","decodeURIComponent","e","originIndependentUrl","baseUrls","resolveUrl","encodeURI","_punctuation","_escapes","_scheme","_email","_attribute","_href","_extended_email","_backpedal","output","prevCapZero","out","inLink","inRawBlock","lastParenIndex","findClosingBracket","linkLen","outputLink","escapes","codespan","mangle","image","Math","random","toString","infostring","escaped","langPrefix","quote","level","raw","headerIds","headerPrefix","slug","xhtml","body","listitem","checkbox","tablerow","tablecell","flags","baseUrl","parse","inlineText","reverse","tok","pop","peek","parseText","row","cell","j","errMsg","silent","hasOwnProperty","originalSlug","&","<",">","\"","'","obj","target","key","arguments","call","tableRow","count","offset","str","curr","splice","c","invert","suffLen","currChar","substr","checkSanitizeDeprecation","callback","pending","done","err","getDefaults","parser","lexer","inlineLexer","module","exports","window"],"mappings":"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","file":"static/js/1.90c5dc705db74d535196.js","sourcesContent":["<template>\r\n    <div class=\"detail\" v-show=\"blogInfo.title\">\r\n        <div class=\"top\">\r\n            <div class=\"top-title\">\r\n                {{blogInfo.title}}\r\n            </div>\r\n            <div class=\"top-tip\">\r\n                <div class=\"author top-item\"><span class=\"el-icon-s-custom\"></span>{{ blogInfo.userinfo && blogInfo.userinfo[0].username}}</div>\r\n                <div class=\"time top-item\"><span class=\"el-icon-date\"></span>{{blogInfo.createAt | getTime}}</div>\r\n                <div class=\"click-num top-item\"><span class=\"el-icon-view\"></span>{{blogInfo.clickNum}}</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"markdown\" v-html=\"compiledMarkdown\" v-highlight></div>\r\n    </div>\r\n</template>\r\n<script>\r\nlet marked = require('marked')\r\nlet hljs = require('highlight.js')\r\nimport 'highlight.js/styles/atom-one-dark.css'\r\nmarked.setOptions({\r\n    renderer: new marked.Renderer(),\r\n    gfm: true,\r\n    tables: true,\r\n    breaks: false,\r\n    pedantic: false,\r\n    sanitize: false,\r\n    smartLists: true,\r\n    smartypants: false,\r\n    highlight: function (code, lang) {\r\n        if (lang && hljs.getLanguage(lang)) {    \r\n            return hljs.highlight(lang, code, true).value;\r\n        } else {\r\n            return hljs.highlightAuto(code).value;\r\n        }\r\n    }\r\n})\r\nexport default {\r\n    data () {\r\n        return {\r\n            blogInfo: {},\r\n        }\r\n    },\r\n    created () {\r\n        this.getBookInfo()\r\n    },\r\n    computed: {\r\n        compiledMarkdown(){\r\n            return marked(this.blogInfo.content || '', {\r\n                sanitize: true\r\n            })\r\n        }\r\n    },\r\n    watch: {\r\n      '$route': function(){\r\n          this.getBookInfo()\r\n      }  \r\n    },\r\n    filters: {\r\n        getTime(val){\r\n            val = new Date(val)\r\n            return val.getFullYear()+'-'+(val.getMonth() + 1)+'-'+val.getDate()\r\n        },  \r\n    },\r\n    methods: {\r\n        async getBookInfo(){\r\n            try{\r\n                let _id = this.$route.params.id\r\n                let result = await this.$axios.get('/blog/detail',{params:{_id: _id}})\r\n                // this.$axios.get('/dot/dotContent',{params:{_id: _id}})\r\n                if(result.data.code == 1){\r\n                    this.blogInfo = result.data.data\r\n                    console.log(this.blogInfo)\r\n                }\r\n            }catch(err){\r\n                this.$message({\r\n                    message: '请求失败',\r\n                    type: 'error'\r\n                })\r\n            }\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n    .detail{\r\n        .markdown{\r\n            p{\r\n                word-wrap: break-word;\r\n                img{\r\n                    width: 100%;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n<style lang=\"scss\" scoped>\r\n.detail{\r\n    .markdown{\r\n        box-sizing: border-box;\r\n        padding: 20px;\r\n        font-size: 26px;\r\n    }\r\n    .top{\r\n        padding: 30px 20px 0;\r\n        .top-title{\r\n            font-size: 40px;\r\n            font-weight: bold;\r\n\r\n        }\r\n        .top-tip{\r\n            display: flex;\r\n            margin-top: 30px;\r\n            color: #a9a6a6;\r\n            .top-item{\r\n                margin-right: 20px;\r\n                span{\r\n                    margin-right: 6px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/detail.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.blogInfo.title),expression:\"blogInfo.title\"}],staticClass:\"detail\"},[_c('div',{staticClass:\"top\"},[_c('div',{staticClass:\"top-title\"},[_vm._v(\"\\n            \"+_vm._s(_vm.blogInfo.title)+\"\\n        \")]),_vm._v(\" \"),_c('div',{staticClass:\"top-tip\"},[_c('div',{staticClass:\"author top-item\"},[_c('span',{staticClass:\"el-icon-s-custom\"}),_vm._v(_vm._s(_vm.blogInfo.userinfo && _vm.blogInfo.userinfo[0].username))]),_vm._v(\" \"),_c('div',{staticClass:\"time top-item\"},[_c('span',{staticClass:\"el-icon-date\"}),_vm._v(_vm._s(_vm._f(\"getTime\")(_vm.blogInfo.createAt)))]),_vm._v(\" \"),_c('div',{staticClass:\"click-num top-item\"},[_c('span',{staticClass:\"el-icon-view\"}),_vm._v(_vm._s(_vm.blogInfo.clickNum))])])]),_vm._v(\" \"),_c('div',{directives:[{name:\"highlight\",rawName:\"v-highlight\"}],staticClass:\"markdown\",domProps:{\"innerHTML\":_vm._s(_vm.compiledMarkdown)}})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-653e943d\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/views/detail.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-653e943d\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!px2rem-loader?{\\\"remUnit\\\":75}!sass-loader?{\\\"sourceMap\\\":true}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./detail.vue\")\n  require(\"!!../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-653e943d\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!px2rem-loader?{\\\"remUnit\\\":75}!sass-loader?{\\\"sourceMap\\\":true}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=1!./detail.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./detail.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./detail.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-653e943d\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./detail.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-653e943d\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/detail.vue\n// module id = null\n// module chunks = ","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2018, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: /^ {0,3}(`{3,}|~{3,})([^`~\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?:\\n+|$)|$)/,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6}) +([^\\n]*?)(?: +#+)? *(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3})(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  nptable: noop,\n  table: noop,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}\\.)/;\nblock.item = /^( *)(bull) ?[^\\n]*(?:\\n(?!\\1bull ?)[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} +')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}|~{3,})[^`\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  fences: noop, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = Object.create(null);\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    this.rules = block.gfm;\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      listStart,\n      listItems,\n      t,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      var lastToken = this.tokens[this.tokens.length - 1];\n      src = src.substring(cap[0].length);\n      // An indented code block cannot interrupt a paragraph.\n      if (lastToken && lastToken.type === 'paragraph') {\n        lastToken.text += '\\n' + cap[0].trimRight();\n      } else {\n        cap = cap[0].replace(/^ {4}/gm, '');\n        this.tokens.push({\n          type: 'code',\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic\n            ? rtrim(cap, '\\n')\n            : cap\n        });\n      }\n      continue;\n    }\n\n    // fences\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (cap = this.rules.nptable.exec(src)) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      listStart = {\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : '',\n        loose: false\n      };\n\n      this.tokens.push(listStart);\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      listItems = [];\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) */, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull.length > 1 ? b.length === 1\n            : (b.length > 1 || (this.options.smartLists && b !== bull))) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        if (loose) {\n          listStart.loose = true;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        t = {\n          type: 'list_item_start',\n          task: istask,\n          checked: ischecked,\n          loose: loose\n        };\n\n        listItems.push(t);\n        this.tokens.push(t);\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      if (listStart.loose) {\n        l = listItems.length;\n        i = 0;\n        for (; i < l; i++) {\n          listItems[i].loose = true;\n        }\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (cap = this.rules.table.exec(src)) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s_])__(?!_)|^\\*\\*([^\\s*])\\*\\*(?!\\*)|^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s_])_(?!_)|^\\*([^\\s*<\\[])\\*(?!\\*)|^_([^\\s<][\\s\\S]*?[^\\s_])_(?!_|[^\\spunctuation])|^_([^\\s_<][\\s\\S]*?[^\\s])_(?!_|[^\\spunctuation])|^\\*([^\\s<\"][\\s\\S]*?[^\\s\\*])\\*(?!\\*|[^\\spunctuation])|^\\*([^\\s*\"<\\[][\\s\\S]*?[^\\s])\\*(?!\\*)/,\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noop,\n  text: /^(`+|[^`])(?:[\\s\\S]*?(?:(?=[\\\\<!\\[`*]|\\b_|$)|[^ ](?= {2,}\\n))|(?= {2,}\\n))/\n};\n\n// list of punctuation marks from common mark spec\n// without ` and ] to workaround Rule 17 (inline code blocks/links)\ninline._punctuation = '!\"#$%&\\'()*+,\\\\-./:;<=>?@\\\\[^_{|}~';\ninline.em = edit(inline.em).replace(/punctuation/g, inline._punctuation).getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\[<>]?|[^\\s<>\\\\])*>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n  text: /^(`+|[^`])(?:[\\s\\S]*?(?:(?=[\\\\<!\\[`*~]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))|(?= {2,}\\n|[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap,\n      prevCapZero;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += escape(cap[1]);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = true;\n      } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = false;\n      }\n\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      var lastParenIndex = findClosingBracket(cap[2], '()');\n      if (lastParenIndex > -1) {\n        var linkLen = 4 + cap[1].length + lastParenIndex;\n        cap[2] = cap[2].substring(0, lastParenIndex);\n        cap[0] = cap[0].substring(0, linkLen).trim();\n        cap[3] = '';\n      }\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      src = src.substring(cap[0].length);\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (this.inRawBlock) {\n        out += this.renderer.text(this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0]);\n      } else {\n        out += this.renderer.text(escape(this.smartypants(cap[0])));\n      }\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, infostring, escaped) {\n  var lang = (infostring || '').match(/\\S*/)[0];\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw, slugger) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + slugger.slug(raw)\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function(text) {\n  return text;\n};\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n};\n\nTextRenderer.prototype.br = function() {\n  return '';\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n  this.slugger = new Slugger();\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, { renderer: new TextRenderer() })\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  this.token = this.tokens.pop();\n  return this.token;\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)),\n        this.slugger);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n      var loose = this.token.loose;\n      var checked = this.token.checked;\n      var task = this.token.task;\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += !loose && this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n      return this.renderer.listitem(body, task, checked);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n    default: {\n      var errMsg = 'Token with \"' + this.token.type + '\" type was not found.';\n      if (this.options.silent) {\n        console.log(errMsg);\n      } else {\n        throw new Error(errMsg);\n      }\n    }\n  }\n};\n\n/**\n * Slugger generates header id\n */\n\nfunction Slugger() {\n  this.seen = {};\n}\n\n/**\n * Convert string to unique id\n */\n\nSlugger.prototype.slug = function(value) {\n  var slug = value\n    .toLowerCase()\n    .trim()\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n    .replace(/\\s/g, '-');\n\n  if (this.seen.hasOwnProperty(slug)) {\n    var originalSlug = slug;\n    do {\n      this.seen[originalSlug]++;\n      slug = originalSlug + '-' + this.seen[originalSlug];\n    } while (this.seen.hasOwnProperty(slug));\n  }\n  this.seen[slug] = 0;\n\n  return slug;\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escape.escapeTest.test(html)) {\n      return html.replace(escape.escapeReplace, function(ch) { return escape.replacements[ch]; });\n    }\n  } else {\n    if (escape.escapeTestNoEncode.test(html)) {\n      return html.replace(escape.escapeReplaceNoEncode, function(ch) { return escape.replacements[ch]; });\n    }\n  }\n\n  return html;\n}\n\nescape.escapeTest = /[&<>\"']/;\nescape.escapeReplace = /[&<>\"']/g;\nescape.replacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nescape.escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nescape.escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function(match, offset, str) {\n        var escaped = false,\n            curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(/ \\|/),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  if (str.length === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < str.length) {\n    var currChar = str.charAt(str.length - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, str.length - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  var level = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n    checkSanitizeDeprecation(opt);\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    checkSanitizeDeprecation(opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    xhtml: false\n  };\n};\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.Slugger = Slugger;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_marked@0.7.0@marked/lib/marked.js\n// module id = dQ1K\n// module chunks = 1"],"sourceRoot":""}